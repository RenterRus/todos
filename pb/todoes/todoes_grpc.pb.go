// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package todoes

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoesClient is the client API for Todoes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoesClient interface {
	CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*CreateTodoResponse, error)
	GetTodos(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetTodoResponse, error)
	DeleteTodo(ctx context.Context, in *DeleteTodoRequest, opts ...grpc.CallOption) (*DeleteTodoResponse, error)
	UpdateTodo(ctx context.Context, in *UpdateTodoRequest, opts ...grpc.CallOption) (*UpdateTodoResponse, error)
	SeTodoExpirationTimeoutTodo(ctx context.Context, in *SeTodoExpirationTimeoutTodoRequest, opts ...grpc.CallOption) (*SeTodoExpirationTimeoutTodoResponse, error)
}

type todoesClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoesClient(cc grpc.ClientConnInterface) TodoesClient {
	return &todoesClient{cc}
}

func (c *todoesClient) CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*CreateTodoResponse, error) {
	out := new(CreateTodoResponse)
	err := c.cc.Invoke(ctx, "/todoes.Todoes/CreateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoesClient) GetTodos(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetTodoResponse, error) {
	out := new(GetTodoResponse)
	err := c.cc.Invoke(ctx, "/todoes.Todoes/GetTodos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoesClient) DeleteTodo(ctx context.Context, in *DeleteTodoRequest, opts ...grpc.CallOption) (*DeleteTodoResponse, error) {
	out := new(DeleteTodoResponse)
	err := c.cc.Invoke(ctx, "/todoes.Todoes/DeleteTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoesClient) UpdateTodo(ctx context.Context, in *UpdateTodoRequest, opts ...grpc.CallOption) (*UpdateTodoResponse, error) {
	out := new(UpdateTodoResponse)
	err := c.cc.Invoke(ctx, "/todoes.Todoes/UpdateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoesClient) SeTodoExpirationTimeoutTodo(ctx context.Context, in *SeTodoExpirationTimeoutTodoRequest, opts ...grpc.CallOption) (*SeTodoExpirationTimeoutTodoResponse, error) {
	out := new(SeTodoExpirationTimeoutTodoResponse)
	err := c.cc.Invoke(ctx, "/todoes.Todoes/SeTodoExpirationTimeoutTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoesServer is the server API for Todoes service.
// All implementations must embed UnimplementedTodoesServer
// for forward compatibility
type TodoesServer interface {
	CreateTodo(context.Context, *CreateTodoRequest) (*CreateTodoResponse, error)
	GetTodos(context.Context, *empty.Empty) (*GetTodoResponse, error)
	DeleteTodo(context.Context, *DeleteTodoRequest) (*DeleteTodoResponse, error)
	UpdateTodo(context.Context, *UpdateTodoRequest) (*UpdateTodoResponse, error)
	SeTodoExpirationTimeoutTodo(context.Context, *SeTodoExpirationTimeoutTodoRequest) (*SeTodoExpirationTimeoutTodoResponse, error)
	mustEmbedUnimplementedTodoesServer()
}

// UnimplementedTodoesServer must be embedded to have forward compatible implementations.
type UnimplementedTodoesServer struct {
}

func (UnimplementedTodoesServer) CreateTodo(context.Context, *CreateTodoRequest) (*CreateTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodo not implemented")
}
func (UnimplementedTodoesServer) GetTodos(context.Context, *empty.Empty) (*GetTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodos not implemented")
}
func (UnimplementedTodoesServer) DeleteTodo(context.Context, *DeleteTodoRequest) (*DeleteTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodo not implemented")
}
func (UnimplementedTodoesServer) UpdateTodo(context.Context, *UpdateTodoRequest) (*UpdateTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodo not implemented")
}
func (UnimplementedTodoesServer) SeTodoExpirationTimeoutTodo(context.Context, *SeTodoExpirationTimeoutTodoRequest) (*SeTodoExpirationTimeoutTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeTodoExpirationTimeoutTodo not implemented")
}
func (UnimplementedTodoesServer) mustEmbedUnimplementedTodoesServer() {}

// UnsafeTodoesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoesServer will
// result in compilation errors.
type UnsafeTodoesServer interface {
	mustEmbedUnimplementedTodoesServer()
}

func RegisterTodoesServer(s grpc.ServiceRegistrar, srv TodoesServer) {
	s.RegisterService(&Todoes_ServiceDesc, srv)
}

func _Todoes_CreateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoesServer).CreateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoes.Todoes/CreateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoesServer).CreateTodo(ctx, req.(*CreateTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todoes_GetTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoesServer).GetTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoes.Todoes/GetTodos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoesServer).GetTodos(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todoes_DeleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoesServer).DeleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoes.Todoes/DeleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoesServer).DeleteTodo(ctx, req.(*DeleteTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todoes_UpdateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoesServer).UpdateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoes.Todoes/UpdateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoesServer).UpdateTodo(ctx, req.(*UpdateTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todoes_SeTodoExpirationTimeoutTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeTodoExpirationTimeoutTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoesServer).SeTodoExpirationTimeoutTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoes.Todoes/SeTodoExpirationTimeoutTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoesServer).SeTodoExpirationTimeoutTodo(ctx, req.(*SeTodoExpirationTimeoutTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Todoes_ServiceDesc is the grpc.ServiceDesc for Todoes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Todoes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todoes.Todoes",
	HandlerType: (*TodoesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTodo",
			Handler:    _Todoes_CreateTodo_Handler,
		},
		{
			MethodName: "GetTodos",
			Handler:    _Todoes_GetTodos_Handler,
		},
		{
			MethodName: "DeleteTodo",
			Handler:    _Todoes_DeleteTodo_Handler,
		},
		{
			MethodName: "UpdateTodo",
			Handler:    _Todoes_UpdateTodo_Handler,
		},
		{
			MethodName: "SeTodoExpirationTimeoutTodo",
			Handler:    _Todoes_SeTodoExpirationTimeoutTodo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todoes.proto",
}
